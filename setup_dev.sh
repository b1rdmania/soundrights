#!/bin/bash

# SoundRights Development Setup Script
# Week 1: Setup & Core Models

echo "🚀 SoundRights Development Setup - Week 1"
echo "========================================"

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Check if Python 3.9+ is installed
echo -e "${YELLOW}Checking Python version...${NC}"
python_version=$(python3 --version 2>&1 | awk '{print $2}')
required_version="3.9"

if [ "$(printf '%s\n' "$required_version" "$python_version" | sort -V | head -n1)" = "$required_version" ]; then 
    echo -e "${GREEN}✓ Python $python_version is installed${NC}"
else
    echo -e "${RED}✗ Python 3.9+ is required. Please install it first.${NC}"
    exit 1
fi

# Check if Docker is installed
echo -e "${YELLOW}Checking Docker...${NC}"
if command -v docker &> /dev/null; then
    echo -e "${GREEN}✓ Docker is installed${NC}"
else
    echo -e "${RED}✗ Docker is not installed. Please install Docker Desktop.${NC}"
    exit 1
fi

# Check if docker-compose is installed
echo -e "${YELLOW}Checking docker-compose...${NC}"
if command -v docker-compose &> /dev/null; then
    echo -e "${GREEN}✓ docker-compose is installed${NC}"
else
    echo -e "${RED}✗ docker-compose is not installed. Please install it.${NC}"
    exit 1
fi

# Create .env file if it doesn't exist
if [ ! -f .env ]; then
    echo -e "${YELLOW}Creating .env file from template...${NC}"
    cat > .env << 'EOF'
# SoundRights Development Environment Configuration
# Generated by setup_dev.sh

# Application
PROJECT_NAME=SoundRights
VERSION=1.0.0
DEBUG=true

# API Configuration
API_V1_STR=/api/v1

# Security
SECRET_KEY=dev-secret-key-change-in-production-$(openssl rand -hex 32)
ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=30
REFRESH_TOKEN_EXPIRE_DAYS=7

# CORS (comma-separated list)
BACKEND_CORS_ORIGINS=http://localhost:3000,http://localhost:5173,http://localhost:8080

# Database
POSTGRES_USER=soundrights
POSTGRES_PASSWORD=soundrights_dev
POSTGRES_HOST=localhost
POSTGRES_PORT=5432
POSTGRES_DB=soundrights_db

# Redis
REDIS_URL=redis://localhost:6379/0
CELERY_BROKER_URL=redis://localhost:6379/1
CELERY_RESULT_BACKEND=redis://localhost:6379/2

# Story Protocol (Testnet) - Fill these in!
STORY_PROTOCOL_RPC_URL=https://testnet.storyrpc.io
STORY_PROTOCOL_CHAIN_ID=1513
STORY_PROTOCOL_PRIVATE_KEY=
STORY_PROTOCOL_IP_ASSET_REGISTRY=
STORY_PROTOCOL_LICENSING_MODULE=

# AI Services - Fill this in!
GOOGLE_AI_API_KEY=

# AWS S3 (for audio storage) - Optional for now
AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=
AWS_S3_BUCKET_NAME=soundrights-audio-dev
AWS_REGION=us-east-1

# Email Configuration - Optional for now
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USER=
SMTP_PASSWORD=
EMAILS_FROM_EMAIL=noreply@soundrights.local
EMAILS_FROM_NAME=SoundRights Dev

# Sentry (optional)
SENTRY_DSN=

# Audio Processing
MAX_AUDIO_FILE_SIZE_MB=100
CHROMAPRINT_DURATION=120
EOF
    echo -e "${GREEN}✓ .env file created${NC}"
    echo -e "${YELLOW}⚠️  Please update the Story Protocol and AI API keys in .env${NC}"
else
    echo -e "${GREEN}✓ .env file already exists${NC}"
fi

# Create Python virtual environment
echo -e "${YELLOW}Creating Python virtual environment...${NC}"
python3 -m venv venv
echo -e "${GREEN}✓ Virtual environment created${NC}"

# Activate virtual environment
echo -e "${YELLOW}Activating virtual environment...${NC}"
source venv/bin/activate

# Upgrade pip
echo -e "${YELLOW}Upgrading pip...${NC}"
pip install --upgrade pip

# Install dependencies
echo -e "${YELLOW}Installing Python dependencies...${NC}"
pip install -r requirements.txt

# Start Docker services
echo -e "${YELLOW}Starting Docker services (PostgreSQL, Redis)...${NC}"
docker-compose -f docker-compose.dev.yml up -d

# Wait for services to be ready
echo -e "${YELLOW}Waiting for services to be ready...${NC}"
sleep 5

# Check if PostgreSQL is ready
echo -e "${YELLOW}Checking PostgreSQL connection...${NC}"
until docker exec soundrights_postgres pg_isready -U soundrights; do
    echo "Waiting for PostgreSQL..."
    sleep 2
done
echo -e "${GREEN}✓ PostgreSQL is ready${NC}"

# Initialize Alembic migrations
echo -e "${YELLOW}Initializing database migrations...${NC}"
mkdir -p alembic/versions

# Create initial migration
echo -e "${YELLOW}Creating initial database migration...${NC}"
alembic revision --autogenerate -m "Initial migration"

# Apply migrations
echo -e "${YELLOW}Applying database migrations...${NC}"
alembic upgrade head

echo -e "${GREEN}✨ Setup complete!${NC}"
echo ""
echo "Next steps:"
echo "1. Update the .env file with your Story Protocol and API keys"
echo "2. Activate the virtual environment: source venv/bin/activate"
echo "3. Run the development server: uvicorn app.main:app --reload"
echo "4. Access the API docs: http://localhost:8000/api/v1/docs"
echo "5. Access pgAdmin: http://localhost:5050 (admin@soundrights.local / admin)"
echo ""
echo "To stop Docker services: docker-compose -f docker-compose.dev.yml down"
echo "To view logs: docker-compose -f docker-compose.dev.yml logs -f" 